/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Community {
  export type CommunityInfoStruct = {
    name: string;
    description: string;
    startDate: string;
    image: string;
    brandingColor: string;
    brandingLogo: string;
    subscriptionPrice: BigNumberish;
    owner: AddressLike;
    createdAt: BigNumberish;
    deleted: boolean;
    membersCount: BigNumberish;
  };

  export type CommunityInfoStructOutput = [
    name: string,
    description: string,
    startDate: string,
    image: string,
    brandingColor: string,
    brandingLogo: string,
    subscriptionPrice: bigint,
    owner: string,
    createdAt: bigint,
    deleted: boolean,
    membersCount: bigint
  ] & {
    name: string;
    description: string;
    startDate: string;
    image: string;
    brandingColor: string;
    brandingLogo: string;
    subscriptionPrice: bigint;
    owner: string;
    createdAt: bigint;
    deleted: boolean;
    membersCount: bigint;
  };
}

export interface CommunityInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createGoal"
      | "deleteCommunity"
      | "getGoals"
      | "getMembers"
      | "isMember"
      | "join"
      | "leave"
      | "members"
      | "viewCommunity"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Deleted" | "GoalCreated" | "Joined" | "Left"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "createGoal",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteCommunity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGoals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isMember", values?: undefined): string;
  encodeFunctionData(functionFragment: "join", values?: undefined): string;
  encodeFunctionData(functionFragment: "leave", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "viewCommunity",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "createGoal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGoals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "join", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "leave", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "viewCommunity",
    data: BytesLike
  ): Result;
}

export namespace DeletedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GoalCreatedEvent {
  export type InputTuple = [goalAddress: AddressLike];
  export type OutputTuple = [goalAddress: string];
  export interface OutputObject {
    goalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace JoinedEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LeftEvent {
  export type InputTuple = [member: AddressLike];
  export type OutputTuple = [member: string];
  export interface OutputObject {
    member: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Community extends BaseContract {
  connect(runner?: ContractRunner | null): Community;
  waitForDeployment(): Promise<this>;

  interface: CommunityInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createGoal: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _image: string,
      _target: BigNumberish,
      _endDate: string
    ],
    [void],
    "nonpayable"
  >;

  deleteCommunity: TypedContractMethod<[], [void], "nonpayable">;

  getGoals: TypedContractMethod<[], [string[]], "view">;

  getMembers: TypedContractMethod<[], [string[]], "view">;

  isMember: TypedContractMethod<[], [boolean], "view">;

  join: TypedContractMethod<[], [void], "payable">;

  leave: TypedContractMethod<[], [void], "nonpayable">;

  members: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  viewCommunity: TypedContractMethod<
    [],
    [Community.CommunityInfoStructOutput],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createGoal"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _image: string,
      _target: BigNumberish,
      _endDate: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteCommunity"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getGoals"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getMembers"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "join"
  ): TypedContractMethod<[], [void], "payable">;
  getFunction(
    nameOrSignature: "leave"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "members"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "viewCommunity"
  ): TypedContractMethod<[], [Community.CommunityInfoStructOutput], "view">;

  getEvent(
    key: "Deleted"
  ): TypedContractEvent<
    DeletedEvent.InputTuple,
    DeletedEvent.OutputTuple,
    DeletedEvent.OutputObject
  >;
  getEvent(
    key: "GoalCreated"
  ): TypedContractEvent<
    GoalCreatedEvent.InputTuple,
    GoalCreatedEvent.OutputTuple,
    GoalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "Joined"
  ): TypedContractEvent<
    JoinedEvent.InputTuple,
    JoinedEvent.OutputTuple,
    JoinedEvent.OutputObject
  >;
  getEvent(
    key: "Left"
  ): TypedContractEvent<
    LeftEvent.InputTuple,
    LeftEvent.OutputTuple,
    LeftEvent.OutputObject
  >;

  filters: {
    "Deleted(address)": TypedContractEvent<
      DeletedEvent.InputTuple,
      DeletedEvent.OutputTuple,
      DeletedEvent.OutputObject
    >;
    Deleted: TypedContractEvent<
      DeletedEvent.InputTuple,
      DeletedEvent.OutputTuple,
      DeletedEvent.OutputObject
    >;

    "GoalCreated(address)": TypedContractEvent<
      GoalCreatedEvent.InputTuple,
      GoalCreatedEvent.OutputTuple,
      GoalCreatedEvent.OutputObject
    >;
    GoalCreated: TypedContractEvent<
      GoalCreatedEvent.InputTuple,
      GoalCreatedEvent.OutputTuple,
      GoalCreatedEvent.OutputObject
    >;

    "Joined(address)": TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;
    Joined: TypedContractEvent<
      JoinedEvent.InputTuple,
      JoinedEvent.OutputTuple,
      JoinedEvent.OutputObject
    >;

    "Left(address)": TypedContractEvent<
      LeftEvent.InputTuple,
      LeftEvent.OutputTuple,
      LeftEvent.OutputObject
    >;
    Left: TypedContractEvent<
      LeftEvent.InputTuple,
      LeftEvent.OutputTuple,
      LeftEvent.OutputObject
    >;
  };
}
