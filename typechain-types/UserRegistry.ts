/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace UserRegistry {
  export type UserStruct = { name: string; image: string; badges: string[] };

  export type UserStructOutput = [
    name: string,
    image: string,
    badges: string[]
  ] & { name: string; image: string; badges: string[] };
}

export interface UserRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addBadge"
      | "getBadges"
      | "getUser"
      | "registerUser"
      | "registerUserToWallet"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addBadge",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBadges",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerUserToWallet",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [AddressLike]): string;

  decodeFunctionResult(functionFragment: "addBadge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBadges", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerUserToWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export interface UserRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): UserRegistry;
  waitForDeployment(): Promise<this>;

  interface: UserRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addBadge: TypedContractMethod<
    [_user: AddressLike, _badge: string],
    [void],
    "nonpayable"
  >;

  getBadges: TypedContractMethod<
    [_walletAddress: AddressLike],
    [string[]],
    "view"
  >;

  getUser: TypedContractMethod<
    [_walletAddress: AddressLike],
    [UserRegistry.UserStructOutput],
    "view"
  >;

  registerUser: TypedContractMethod<
    [_name: string, _image: string],
    [void],
    "nonpayable"
  >;

  registerUserToWallet: TypedContractMethod<
    [_name: string, _image: string, _wallet: AddressLike],
    [void],
    "nonpayable"
  >;

  users: TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { name: string; image: string }],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addBadge"
  ): TypedContractMethod<
    [_user: AddressLike, _badge: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBadges"
  ): TypedContractMethod<[_walletAddress: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [_walletAddress: AddressLike],
    [UserRegistry.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "registerUser"
  ): TypedContractMethod<[_name: string, _image: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerUserToWallet"
  ): TypedContractMethod<
    [_name: string, _image: string, _wallet: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [[string, string] & { name: string; image: string }],
    "view"
  >;

  filters: {};
}
