/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type GoalInfoStruct = {
  name: string;
  description: string;
  image: string;
  endDate: string;
  owner: AddressLike;
  createdAt: BigNumberish;
  target: BigNumberish;
  reached: BigNumberish;
  deleted: boolean;
};

export type GoalInfoStructOutput = [
  name: string,
  description: string,
  image: string,
  endDate: string,
  owner: string,
  createdAt: bigint,
  target: bigint,
  reached: bigint,
  deleted: boolean
] & {
  name: string;
  description: string;
  image: string;
  endDate: string;
  owner: string;
  createdAt: bigint;
  target: bigint;
  reached: bigint;
  deleted: boolean;
};

export interface GoalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createIdea"
      | "deleteGoal"
      | "getCommunity"
      | "getIdeas"
      | "goal"
      | "viewGoal"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "Deleted" | "IdeaCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createIdea",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCommunity",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getIdeas", values?: undefined): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(functionFragment: "viewGoal", values?: undefined): string;

  decodeFunctionResult(functionFragment: "createIdea", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deleteGoal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCommunity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIdeas", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "viewGoal", data: BytesLike): Result;
}

export namespace DeletedEvent {
  export type InputTuple = [owner: AddressLike];
  export type OutputTuple = [owner: string];
  export interface OutputObject {
    owner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace IdeaCreatedEvent {
  export type InputTuple = [goalAddress: AddressLike];
  export type OutputTuple = [goalAddress: string];
  export interface OutputObject {
    goalAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Goal extends BaseContract {
  connect(runner?: ContractRunner | null): Goal;
  waitForDeployment(): Promise<this>;

  interface: GoalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createIdea: TypedContractMethod<
    [
      _name: string,
      _description: string,
      _image: string,
      _donationsTarget: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  deleteGoal: TypedContractMethod<[], [void], "nonpayable">;

  getCommunity: TypedContractMethod<[], [string], "view">;

  getIdeas: TypedContractMethod<[], [string[]], "view">;

  goal: TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        name: string;
        description: string;
        image: string;
        endDate: string;
        owner: string;
        createdAt: bigint;
        target: bigint;
        reached: bigint;
        deleted: boolean;
      }
    ],
    "view"
  >;

  viewGoal: TypedContractMethod<[], [GoalInfoStructOutput], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createIdea"
  ): TypedContractMethod<
    [
      _name: string,
      _description: string,
      _image: string,
      _donationsTarget: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deleteGoal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCommunity"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getIdeas"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "goal"
  ): TypedContractMethod<
    [],
    [
      [
        string,
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        boolean
      ] & {
        name: string;
        description: string;
        image: string;
        endDate: string;
        owner: string;
        createdAt: bigint;
        target: bigint;
        reached: bigint;
        deleted: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "viewGoal"
  ): TypedContractMethod<[], [GoalInfoStructOutput], "view">;

  getEvent(
    key: "Deleted"
  ): TypedContractEvent<
    DeletedEvent.InputTuple,
    DeletedEvent.OutputTuple,
    DeletedEvent.OutputObject
  >;
  getEvent(
    key: "IdeaCreated"
  ): TypedContractEvent<
    IdeaCreatedEvent.InputTuple,
    IdeaCreatedEvent.OutputTuple,
    IdeaCreatedEvent.OutputObject
  >;

  filters: {
    "Deleted(address)": TypedContractEvent<
      DeletedEvent.InputTuple,
      DeletedEvent.OutputTuple,
      DeletedEvent.OutputObject
    >;
    Deleted: TypedContractEvent<
      DeletedEvent.InputTuple,
      DeletedEvent.OutputTuple,
      DeletedEvent.OutputObject
    >;

    "IdeaCreated(address)": TypedContractEvent<
      IdeaCreatedEvent.InputTuple,
      IdeaCreatedEvent.OutputTuple,
      IdeaCreatedEvent.OutputObject
    >;
    IdeaCreated: TypedContractEvent<
      IdeaCreatedEvent.InputTuple,
      IdeaCreatedEvent.OutputTuple,
      IdeaCreatedEvent.OutputObject
    >;
  };
}
